//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Character/player_controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @player_controls_script : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @player_controls_script()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""player_controls"",
    ""maps"": [
        {
            ""name"": ""player_map"",
            ""id"": ""b84dbd01-656a-46cc-a715-9223932cff97"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""85781812-0ae0-45c1-b71e-ff300af28791"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotation"",
                    ""type"": ""Value"",
                    ""id"": ""66dfd271-ab17-4f18-9dd9-48b60a5e918b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""boost"",
                    ""type"": ""Value"",
                    ""id"": ""71f77790-76bc-4836-be10-c6295a7cc462"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Buy"",
                    ""type"": ""Button"",
                    ""id"": ""820f42f8-d646-400f-a5cc-9554934b3288"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleInv"",
                    ""type"": ""Button"",
                    ""id"": ""0d23283c-96f3-46f8-944a-bd46e22b28f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UnToggleInv"",
                    ""type"": ""Button"",
                    ""id"": ""74b6b42e-2dcd-465f-b6cc-bce502b452f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleObjectInv"",
                    ""type"": ""Button"",
                    ""id"": ""99540491-a671-4007-b51a-c09020d31c08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UnToggleObjectInv"",
                    ""type"": ""Button"",
                    ""id"": ""f4a19d60-3104-4c10-9936-e509a8d60a04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6bfe2435-43f0-4009-908b-f3916082565f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""68d44d71-1300-4093-93a3-2ca3d1d5f434"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""4070cfd6-a653-4959-abaa-5593ff89d6f9"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5cc23047-58f2-4b33-92df-581159b3c6c9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""14734da3-d291-4de0-9c5a-8b2d358e8b3e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""308fc4e4-ff5f-4812-81e1-8181ac3485e0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""34d0c203-2a06-43e8-a706-a93db37e372a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9bbf2ec0-980a-41a4-b79b-609ea787c6bb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d333178-bf4b-46fa-98e5-90b2a0844344"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d25fde1b-c22d-483b-9e95-52a4ce2b5ea0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Buy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19d06135-ada4-4678-b7c4-e7217d46c1c2"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInv"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1697a2be-e889-4b4e-be9a-948a248fb5e0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0216cf5d-9c68-414a-9ea3-90a4cdd3b9e0"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnToggleInv"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1440ac66-e05a-49e2-a28d-21a536858023"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnToggleObjectInv"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca82649b-bac3-449b-acb3-3089cf59ff35"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleObjectInv"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""893e9c3d-eaef-4d0b-a43b-3eb5dc10707d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // player_map
        m_player_map = asset.FindActionMap("player_map", throwIfNotFound: true);
        m_player_map_movement = m_player_map.FindAction("movement", throwIfNotFound: true);
        m_player_map_rotation = m_player_map.FindAction("rotation", throwIfNotFound: true);
        m_player_map_boost = m_player_map.FindAction("boost", throwIfNotFound: true);
        m_player_map_Buy = m_player_map.FindAction("Buy", throwIfNotFound: true);
        m_player_map_ToggleInv = m_player_map.FindAction("ToggleInv", throwIfNotFound: true);
        m_player_map_UnToggleInv = m_player_map.FindAction("UnToggleInv", throwIfNotFound: true);
        m_player_map_ToggleObjectInv = m_player_map.FindAction("ToggleObjectInv", throwIfNotFound: true);
        m_player_map_UnToggleObjectInv = m_player_map.FindAction("UnToggleObjectInv", throwIfNotFound: true);
        m_player_map_Jump = m_player_map.FindAction("Jump", throwIfNotFound: true);
        m_player_map_Escape = m_player_map.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player_map
    private readonly InputActionMap m_player_map;
    private IPlayer_mapActions m_Player_mapActionsCallbackInterface;
    private readonly InputAction m_player_map_movement;
    private readonly InputAction m_player_map_rotation;
    private readonly InputAction m_player_map_boost;
    private readonly InputAction m_player_map_Buy;
    private readonly InputAction m_player_map_ToggleInv;
    private readonly InputAction m_player_map_UnToggleInv;
    private readonly InputAction m_player_map_ToggleObjectInv;
    private readonly InputAction m_player_map_UnToggleObjectInv;
    private readonly InputAction m_player_map_Jump;
    private readonly InputAction m_player_map_Escape;
    public struct Player_mapActions
    {
        private @player_controls_script m_Wrapper;
        public Player_mapActions(@player_controls_script wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_player_map_movement;
        public InputAction @rotation => m_Wrapper.m_player_map_rotation;
        public InputAction @boost => m_Wrapper.m_player_map_boost;
        public InputAction @Buy => m_Wrapper.m_player_map_Buy;
        public InputAction @ToggleInv => m_Wrapper.m_player_map_ToggleInv;
        public InputAction @UnToggleInv => m_Wrapper.m_player_map_UnToggleInv;
        public InputAction @ToggleObjectInv => m_Wrapper.m_player_map_ToggleObjectInv;
        public InputAction @UnToggleObjectInv => m_Wrapper.m_player_map_UnToggleObjectInv;
        public InputAction @Jump => m_Wrapper.m_player_map_Jump;
        public InputAction @Escape => m_Wrapper.m_player_map_Escape;
        public InputActionMap Get() { return m_Wrapper.m_player_map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_mapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_mapActions instance)
        {
            if (m_Wrapper.m_Player_mapActionsCallbackInterface != null)
            {
                @movement.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnMovement;
                @movement.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnMovement;
                @movement.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnMovement;
                @rotation.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnRotation;
                @rotation.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnRotation;
                @rotation.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnRotation;
                @boost.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnBoost;
                @boost.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnBoost;
                @boost.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnBoost;
                @Buy.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnBuy;
                @Buy.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnBuy;
                @Buy.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnBuy;
                @ToggleInv.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnToggleInv;
                @ToggleInv.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnToggleInv;
                @ToggleInv.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnToggleInv;
                @UnToggleInv.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnUnToggleInv;
                @UnToggleInv.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnUnToggleInv;
                @UnToggleInv.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnUnToggleInv;
                @ToggleObjectInv.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnToggleObjectInv;
                @ToggleObjectInv.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnToggleObjectInv;
                @ToggleObjectInv.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnToggleObjectInv;
                @UnToggleObjectInv.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnUnToggleObjectInv;
                @UnToggleObjectInv.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnUnToggleObjectInv;
                @UnToggleObjectInv.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnUnToggleObjectInv;
                @Jump.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnJump;
                @Escape.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_Player_mapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @movement.started += instance.OnMovement;
                @movement.performed += instance.OnMovement;
                @movement.canceled += instance.OnMovement;
                @rotation.started += instance.OnRotation;
                @rotation.performed += instance.OnRotation;
                @rotation.canceled += instance.OnRotation;
                @boost.started += instance.OnBoost;
                @boost.performed += instance.OnBoost;
                @boost.canceled += instance.OnBoost;
                @Buy.started += instance.OnBuy;
                @Buy.performed += instance.OnBuy;
                @Buy.canceled += instance.OnBuy;
                @ToggleInv.started += instance.OnToggleInv;
                @ToggleInv.performed += instance.OnToggleInv;
                @ToggleInv.canceled += instance.OnToggleInv;
                @UnToggleInv.started += instance.OnUnToggleInv;
                @UnToggleInv.performed += instance.OnUnToggleInv;
                @UnToggleInv.canceled += instance.OnUnToggleInv;
                @ToggleObjectInv.started += instance.OnToggleObjectInv;
                @ToggleObjectInv.performed += instance.OnToggleObjectInv;
                @ToggleObjectInv.canceled += instance.OnToggleObjectInv;
                @UnToggleObjectInv.started += instance.OnUnToggleObjectInv;
                @UnToggleObjectInv.performed += instance.OnUnToggleObjectInv;
                @UnToggleObjectInv.canceled += instance.OnUnToggleObjectInv;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public Player_mapActions @player_map => new Player_mapActions(this);
    public interface IPlayer_mapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnBuy(InputAction.CallbackContext context);
        void OnToggleInv(InputAction.CallbackContext context);
        void OnUnToggleInv(InputAction.CallbackContext context);
        void OnToggleObjectInv(InputAction.CallbackContext context);
        void OnUnToggleObjectInv(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
